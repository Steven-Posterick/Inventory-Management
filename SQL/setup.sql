-- Table: public.Product
-- DROP TABLE public."Product";

CREATE TABLE IF NOT EXISTS public."Product"
(
    "Id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "Description" character varying(50) COLLATE pg_catalog."default",
    "Price" numeric(18,2),
    "Cost" numeric(18,2),
    CONSTRAINT "Product_pkey" PRIMARY KEY ("Id")
    )

    TABLESPACE pg_default;

ALTER TABLE public."Product"
    OWNER to postgres;

-- Table: public.Record
-- DROP TABLE public."Record";

CREATE TABLE IF NOT EXISTS public."Record"
(
    "Id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "ProductId" integer,
    "Quantity" integer,
    "Date" date,
    CONSTRAINT "Record_pkey" PRIMARY KEY ("Id"),
    CONSTRAINT "ProductId" FOREIGN KEY ("ProductId")
    REFERENCES public."Product" ("Id") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    )

    TABLESPACE pg_default;

ALTER TABLE public."Record"
    OWNER to postgres;

-- Table: public.Receipt_Record
-- DROP TABLE public."Receipt_Record";
CREATE TABLE IF NOT EXISTS public."Receipt_Record"
(
    "Id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "Price" numeric(18,2),
    CONSTRAINT "Receipt_Record_pkey" PRIMARY KEY ("Id"),
	CONSTRAINT "fkey_RecordId" FOREIGN KEY ("Id")
        REFERENCES public."Record" ("Id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID    
)

TABLESPACE pg_default;

ALTER TABLE public."Receipt_Record"
    OWNER to postgres;


-- Table: public.Received_Record
-- DROP TABLE public."Received_Record";

CREATE TABLE IF NOT EXISTS public."Received_Record"
(
    "Id" integer NOT NULL,
    "Cost" numeric(18,2),
    CONSTRAINT "Received_Record_pkey" PRIMARY KEY ("Id"),
    CONSTRAINT "fkey_RecordId" FOREIGN KEY ("Id")
        REFERENCES public."Record" ("Id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE public."Received_Record"
    OWNER to postgres;

-- Table: public.Allocation
-- DROP TABLE public."Allocation";

CREATE TABLE IF NOT EXISTS public."Allocation"
(
    "ReceiptId" integer NOT NULL,
    "ReceivedId" integer NOT NULL,
    "Allocated_Quantity" integer,
    CONSTRAINT "Allocation_pkey" PRIMARY KEY ("ReceiptId", "ReceivedId"),
    CONSTRAINT "ReceiptId_fkey" FOREIGN KEY ("ReceiptId")
        REFERENCES public."Receipt_Record" ("Id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT "ReceivedId_fkey" FOREIGN KEY ("ReceivedId")
        REFERENCES public."Received_Record" ("Id") MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE public."Allocation"
    OWNER to postgres;

CREATE OR REPLACE PROCEDURE allocate_records(
	receiptid integer,
	receivedid integer)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
    received_allocated INT;
	receipt_allocated INT;
	received_quantity INT;
	receipt_quantity INT;
	received_available INT;
	receipt_needed INT;
	allocated_quantity INT;
BEGIN
	-- Each tuple of ids must have one and only one record, delete then reallocate.
	DELETE FROM public."Allocation" as a
	WHERE a."ReceiptId" = receiptid AND a."ReceivedId" = receivedid;

    SELECT COALESCE(SUM(Allocated_Quantity), 0)
    INTO received_allocated
    FROM public."Allocation" as a
    WHERE a."ReceivedId" = ReceivedId;

    SELECT COALESCE(SUM(Allocated_Quantity), 0)
    INTO receipt_allocated
    FROM public."Allocation" as a
    WHERE a."ReceiptId" = ReceiptId;

    SELECT "Quantity" INTO received_quantity
    FROM public."Record" as r WHERE r."Id" = ReceivedId;

    SELECT "Quantity" INTO receipt_quantity
    FROM public."Record" as r WHERE r."Id" = ReceiptId;

    SELECT (received_quantity - received_allocated) INTO received_available;
    SELECT (receipt_quantity - receipt_allocated) INTO receipt_needed;

    SELECT (LEAST(received_available, receipt_needed)) INTO allocated_quantity;

    IF (allocated_quantity > 0) THEN
        INSERT INTO public."Allocation" VALUES (ReceiptId, ReceivedId, allocated_quantity);
    END IF;
END
$BODY$;
